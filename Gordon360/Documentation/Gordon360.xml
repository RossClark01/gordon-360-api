<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gordon360</name>
    </assembly>
    <members>
        <member name="M:Gordon360.Controllers.AccountsController.Search(System.String)">
            <summary>
            Return a list of accounts matching some or all of the search parameter
            </summary>
            
            
            Full Explanation:
            
            Returns a list of accounts ordered by key of a combination of users first/last/user name in the following order
                1.first or last name begins with search query,
                2.first or last name in Username that begins with search query
                3.first or last name that contains the search query
                
            If Full Names of any two accounts are the same the follow happens to the dictionary key to solve this problem
                1. If there is a number attached to their account this is appened to the end of their key
                2. Otherwise an '1' is appended to the end
                
            Note:
            A '1' is added inbetween a key's first and last name or first and last username in order to preserve the presedence set by shorter names
            as both first and last are used as a part of the key in order to order matching first/last names with the remaining part of their name
            but this resulted in the presedence set by shorter names to be lost
            
            Note:
            "z" s are added in order to keep each case split into each own group in the dictionary
            
            <param name="searchString"> The input to search for </param>
            <returns> All accounts meeting some or all of the parameter</returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.SearchWithSpace(System.String,System.String)">
            <summary>
            Return a list of accounts matching some or all of the search parameter
            We are searching through a concatonated string, containing several pieces of info about each user.
            </summary>
            <param name="searchString"> The input to search for </param>
            <param name="secondaryString"> The second piece of the search terms </param>
            <returns> All accounts meeting some or all of the parameter</returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.AdvancedPeopleSearch(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Deprecated route uses new route below with two leading parameters for
            including students and facStaff.
            
            Return a list of accounts matching some or all of the search parameters
            We are searching through all the info of a user, then narrowing it down to get only what we want
            </summary>
            <param name="includeAlumniSearchParam"> For non-students: Include Alumni in search results or not </param>
            <param name="firstNameSearchParam"> The first name to search for </param>
            <param name="lastNameSearchParam"> The last name to search for </param>
            <param name="majorSearchParam"></param>
            <param name="minorSearchParam"></param>
            <param name="hallSearchParam"></param>
            <param name="classTypeSearchParam"></param>
            <param name="hometownSearchParam"></param>
            <param name="stateSearchParam"></param>
            <param name="countrySearchParam"></param>
            <param name="departmentSearchParam"></param>   
            <param name="buildingSearchParam"></param>     
            <returns> All accounts meeting some or all of the parameter</returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.AdvancedPeopleSearch(System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Return a list of accounts matching some or all of the search parameters
            We are searching through all the info of a user, then narrowing it down to get only what we want
            </summary>
            <param name="includeStudentSearchParam"> Include Student in search results or not </param>
            <param name="includeFacStaffSearchParam"> Include Faculty and Staff in search results or not </param>
            <param name="includeAlumniSearchParam"> For non-students: Include Alumni in search results or not </param>
            <param name="firstNameSearchParam"> The first name to search for </param>
            <param name="lastNameSearchParam"> The last name to search for </param>
            <param name="majorSearchParam"></param>
            <param name="minorSearchParam"></param>
            <param name="hallSearchParam"></param>
            <param name="classTypeSearchParam"></param>
            <param name="hometownSearchParam"></param>
            <param name="stateSearchParam"></param>
            <param name="countrySearchParam"></param>
            <param name="departmentSearchParam"></param>   
            <param name="buildingSearchParam"></param>     
            <returns> All accounts meeting some or all of the parameter</returns>
        </member>
        <member name="M:Gordon360.Controllers.AccountsController.GenerateKey(System.String,System.String,System.String,System.Int32)">
             <Summary>
               This function generates a key for each account
             </Summary>
            
             <param name="keyPart1">This is what you would want to sort by first, used for first part of key</param>
             <param name="keyPart2">This is what you want to sort by second, used for second part of key</param>
             <param name="precedence">Set where in the dictionary this key group will be ordered</param>
             <param name="userName">The User's Username</param>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetActivitiesForSessionAsync(System.String)">
            <summary>Gets the activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find which activities are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetActivityTypesForSessionAsync(System.String)">
            <summary>Gets the different types of activities taking place during a given session</summary>
            <param name="id">The session identifier</param>
            <returns>A list of all the different types of activities that are active during the given session determined by the id parameter</returns>
            <remarks>Queries the database to find the distinct activities type of activities that are active during the session desired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetActivityStatus(System.String,System.String)">
            <summary>
            Get the status (open or closed) of an activity for a given session
            </summary>
            <param name="sessionCode">The session code that we want to check the status for</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetOpenActivitiesAsync">
            <summary>
            Get all the activities that have not yet been closed out for the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetOpenActivitiesAsync(System.Int32)">
            <summary>
            Get all the activities that have not yet been closed out for the current session for 
            which a given user is the group admin
            </summary>
            <param name="id">The id of the user who is group admin</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetClosedActivitiesAsync">
            <summary>
            Get all the activities that are already closed out for the current session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.GetClosedActivitiesAsync(System.Int32)">
            <summary>
            Get all the activities that are already closed out for the current session for
            which a given user is group admin
            </summary>
            <param name="id">The id of the user who is group admin</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.Put(System.String,Gordon360.Models.CCT.ACT_INFO)">
            <summary>
            </summary>
            <param name="id"></param>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.PostImageAsync(System.String)">
            <summary>
            Set an image for the activity
            </summary>
            <param name="id">The activity Code</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.ResetImage(System.String)">
            <summary>
            Reset the activity Image
            </summary>
            <param name="id">The activity code</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ActivitiesController.TogglePrivacy(System.String,System.Boolean)">
            <summary>Update an existing activity to be private or not</summary>
            <param name="id">The id of the activity</param>
            <param name = "p">the boolean value</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.AdminsController.GetAll">
            <summary>
            Get all admins
            </summary>
            <returns>
            A list of all admins
            </returns>
            <remarks>
            Server makes call to the database and returns all admins
            </remarks>
        </member>
        <member name="M:Gordon360.Controllers.AdminsController.GetByGordonId(System.String)">
            <summary>
            Get a specific admin
            </summary>
            <returns>
            The specific admin
            </returns>
            <remarks>
            Server makes call to the database and returns the specific admin
            </remarks>
        </member>
        <member name="M:Gordon360.Controllers.AdminsController.Post(Gordon360.Models.CCT.ADMIN)">
            <summary>Create a new admin to be added to database</summary>
            <param name="admin">The admin item containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new admin to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.AdminsController.Delete(System.Int32)">
            <summary>Delete an existing admin</summary>
            <param name="id">The identifier for the admin to be deleted</param>
            <remarks>Calls the server to make a call and remove the given admin from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetMajors">
            <summary>
            Return a list majors.
            </summary>
            <returns> All majors</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetMinors">
            <summary>
            Return a list minors.
            </summary>
            <returns> All minors</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetHalls">
            <summary>
            Return a list minors.
            </summary>
            <returns> All minors</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetStates">
            <summary>
            Return a list states.
            </summary>
            <returns> All states</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetCountries">
            <summary>
            Return a list countries.
            </summary>
            <returns> All countries</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetDepartments">
            <summary>
            Return a list departments.
            </summary>
            <returns> All departments</returns>
        </member>
        <member name="M:Gordon360.Controllers.AdvancedSearchController.GetBuildings">
            <summary>
            Return a list buildings.
            </summary>
            <returns> All buildings</returns>
        </member>
        <member name="M:Gordon360.Controllers.ContentManagementController.GetSliderContent">
            <summary>Get all the slider content for the dashboard slider</summary>
            <returns>A list of all the slides for the slider</returns>
            <remarks>Queries the database for all entries in slider table</remarks>
        </member>
        <member name="M:Gordon360.Controllers.DiningController.GetAsync">
            <summary>
             Gets information about student's dining plan and balance
            </summary>
            <returns>A DiningInfo object</returns>
        </member>
        <member name="M:Gordon360.Controllers.EventsController.GetAllEvents">
            <summary>
            This makes use of our cached request to 25Live, which stores AllEvents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.CheckIfHousingAdmin">
            <summary>
            Check if the currently logged in user is authorized to view the housing admin page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.AddHousingAdmin(System.String)">
            <summary>
            Add a user to the admin whitelist
            </summary>
            <param name="id"> The id of the user to add </param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.RemoveHousingAdmin(System.String)">
            <summary>
            Remove a user from the admin whitelist
            </summary>
            <param name="id"> The id of the user to remove </param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.DeleteApplication(System.Int32)">
            <summary>
            Delete an application (and consequently all rows that reference it)
            </summary>
            <param name="applicationID"> The id of the application to remove </param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetApartmentHalls">
            <summary>
            Get a list of the apartment-style halls
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetApplicationIDAsync">
            <summary>
            Get apartment application ID number of currently logged in user if that user is on an existing application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetUserApplicationIDAsync(System.String)">
            <summary>
            Get apartment application ID number for a user if that user is on an existing application
            </summary>
            <param name="username">username of the profile info</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.SaveApplicationAsync(Gordon360.Models.ViewModels.ApartmentApplicationViewModel)">
            <summary>
            save application
            </summary>
            <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.EditApplicationAsync(System.Int32,Gordon360.Models.ViewModels.ApartmentApplicationViewModel)">
            <summary>
            update existing application (Differentiated by HttpPut instead of HttpPost)
            </summary>
            <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.ChangeEditor(System.Int32,Gordon360.Models.ViewModels.ApartmentApplicationViewModel)">
            <summary>
            change the editor (i.e. primary applicant) of the application
            </summary>
            <returns>The result of changing the editor</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.ChangeApplicationDateSubmitted(System.Int32)">
            <summary>
            change the date an application was submitted
            (changes it from null the first time they submit)
            </summary>
            <returns>The result of changing the date submitted</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetApartmentApplication(System.Int32)">
            <summary>Get apartment application info for a given application ID number</summary>
            <param name="applicationID">application ID number of the apartment application</param>
            <returns>Object of type ApartmentAppViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.HousingController.GetAllApartmentApplication">
            <summary>Get apartment application info for all applications if the current user is a housing admin</summary>
            <returns>Object of type ApartmentApplicationViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.GetJobs(System.DateTime,System.DateTime)">
            <summary>
            Get a user's active jobs
            </summary>
            <param name="shiftStart">The datetime that the shift started</param>
            <param name="shiftEnd">The datetime that the shift ended</param>
            <returns>The user's active jobs</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.DEPRECATED_getJobsForUser(Gordon360.Models.ViewModels.ActiveJobSelectionParametersModel)">
            <summary>
            Get a user's active jobs
            </summary>
            <param name="details"></param>
            <returns>The user's active jobs</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.getSavedShiftsForUser">
            <summary>
            Get a user's saved shifts
            </summary>
            <returns>The user's saved shifts</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.saveShiftForUser(Gordon360.Models.ViewModels.ShiftViewModel)">
            <summary>
            Get a user's active jobs
            </summary>
            <param name="shiftDetails"></param>
            <returns>The result of saving a shift</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.editShiftForUser(Gordon360.Models.ViewModels.ShiftViewModel)">
            <summary>
            Edit a shift
            <param name="shiftDetails">The details that will be changed</param>
            </summary>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.deleteShiftForUser(System.Int32)">
            <summary>
            Get a user's active jobs
            </summary>
            <returns>The result of deleting the shift</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.submitShiftsForUser(System.Collections.Generic.IEnumerable{Gordon360.Models.ViewModels.ShiftToSubmitViewModel})">
            <summary>
            Submit shifts
            </summary>
            <returns>The result of submitting the shifts</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.getSupervisorName(System.Int32)">
            <summary>
            Gets the name of a supervisor based on their ID number
            </summary>
            <returns>The name of the supervisor</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.ClockIn(System.Boolean)">
            <summary>
             sends the current clock in status to the back end
             true if user is clocked in and false if clocked out
            </summary>
            <param name="state">detail to be saved in the back end, true if user just clocked in</param>
            <returns>returns confirmation that the answer was recorded </returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.ClockOut">
            <summary>
             gets the the clock in status from the back end
             true if user is clocked in and false if clocked out
            </summary>
            <returns>ClockInViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.DeleteClockIn">
            <summary>
            deletes the last clocked in status of a user
            </summary>
            <returns>returns confirmation that clock in status was deleted</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.CanUsePage">
            <summary>
             gets the response as to whether the user can use staff timesheets
             returns true if the staff member has at least one qualifying active job as hourly staff
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.getJobsForStaff(Gordon360.Models.ViewModels.ActiveJobSelectionParametersModel)">
            <summary>
            Get a user's active jobs
            </summary>
            <param name="details"> deatils of the current Staff</param>
            <returns>The Staff's active jobs</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.getSavedShiftsForStaff">
            <summary>
            Get a user's saved shifts
            </summary>
            <returns>The staff's saved shifts</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.saveShiftForStaff(Gordon360.Models.ViewModels.ShiftViewModel)">
            <summary>
            Get a user's active jobs
            </summary>
            <param name="shiftDetails">The details that will be changed</param>
            <returns>The result of saving a shift for a staff</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.editShiftForStaff(Gordon360.Models.ViewModels.ShiftViewModel)">
            <summary>
            Edit a shift for staff
            <param name="shiftDetails">The details that will be changed</param>
            </summary>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.deleteShiftForStaff(System.Int32)">
            <summary>
            Delete a user's active job
            </summary>
            <returns>The result of deleting the shift for a Staff</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.submitShiftsForStaff(System.Collections.Generic.IEnumerable{Gordon360.Models.ViewModels.ShiftToSubmitViewModel})">
            <summary>
            Submit shift for staff
            </summary>
            <returns>The result of submitting the shifts for staff</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.getSupervisorNameStaff(System.Int32)">
            <summary>
            Gets the name of a supervisor based on their ID number for Staff
            </summary>
            <returns>The name of the supervisor</returns>
        </member>
        <member name="M:Gordon360.Controllers.JobsController.getHourTypes">
            <summary>
            Gets the hour types for Staff
            </summary>
            <returns>The hour types for staff</returns>
        </member>
        <member name="M:Gordon360.Controllers.LogController.Post(System.String)">
            <summary>Create a new error log item to be added to database</summary>
            <param name="error_message">The error message containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new message to the service to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.LogController.Post(Gordon360.Models.CCT.ERROR_LOG)">
            <summary>Create a new error log item to be added to database</summary>
            <param name="error_log">The error log containing the ERROR_TIME, and the LOG_MESSAGE</param>
            <returns></returns>
            <remarks>Posts a new error_log to the server to be added into the database. Useful if you want to input the datetime in the front end for greater accuracy</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.Get">
            <summary>
            Get all memberships
            </summary>
            <returns>
            A list of all memberships
            </returns>
            <remarks>
            Server makes call to the database and returns all current memberships
            </remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetMembershipsForActivity(System.String)">
            <summary>
            Get all the memberships associated with a given activity
            </summary>
            <param name="id">The activity ID</param>
            <returns>IHttpActionResult</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetGroupAdminForActivity(System.String)">
            <summary>
            Gets the group admin memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all leader-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetLeadersForActivity(System.String)">
            <summary>
            Gets the leader-type memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all leader-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetAdvisorsForActivity(System.String)">
            <summary>
            Gets the advisor-type memberships associated with a given activity.
            </summary>
            <param name="id">The activity ID.</param>
            <returns>A list of all advisor-type memberships for the specified activity.</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetActivityFollowersCount(System.String)">
            <summary>
            Gets the number of followers of an activity
            </summary>
            <param name="id">The activity ID.</param>
            <returns>The number of followers of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetActivityMembersCount(System.String)">
            <summary>
            Gets the number of members (besides followers) of an activity
            </summary>
            <param name="id">The activity ID.</param>
            <returns>The number of members of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetActivityFollowersCountForSession(System.String,System.String)">
            <summary>
            Gets the number of followers of an activity
            </summary>
            <param name="id">The activity ID.</param>
            <param name="sess_cde">The session code</param>
            <returns>The number of followers of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetActivityMembersCountForSession(System.String,System.String)">
            <summary>
            Gets the number of members (excluding followers) of an activity
            </summary>
            <param name="id">The activity ID.</param>
            <param name="sess_cde">The session code</param>
            <returns>The number of members of the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.Post(Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>Create a new membership item to be added to database</summary>
            <param name="membership">The membership item containing all required and relevant information</param>
            <returns></returns>
            <remarks>Posts a new membership to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetMembershipsForStudent(System.String)">
            <summary>Fetch memberships that a specific student has been a part of</summary>
            <param name="id">The Student id</param>
            <returns>The membership information that the student is a part of</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.GetMembershipsForStudentByUsenameAsync(System.String)">
            <summary>
            Fetch memberships that a specific student has been a part of
            @TODO: Move security checks to state your business? Or consider changing implementation here
            </summary>
            <param name="username">The Student Username</param>
            <returns>The membership information that the student is a part of</returns>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.Put(System.Int32,Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>Update an existing membership item</summary>
            <param name="id">The membership id of whichever one is to be changed</param>
            <param name="membership">The content within the membership that is to be changed and what it will change to</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.ToggleGroupAdmin(Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>Update an existing membership item to be a group admin or not</summary>
             /// <param name="membership">The content within the membership that is to be changed</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.TogglePrivacy(System.Int32,System.Boolean)">
            <summary>Update an existing membership item to be private or not</summary>
            <param name="id">The id of the membership</param>
            <param name = "p">the boolean value</param>
            <remarks>Calls the server to make a call and update the database with the changed information</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.Delete(System.Int32)">
            <summary>Delete an existing membership</summary>
            <param name="id">The identifier for the membership to be deleted</param>
            <remarks>Calls the server to make a call and remove the given membership from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MembershipsController.IsGroupAdmin(System.Int32)">
            <summary>	
            Determines whether or not the given student is a Group Admin of some activity	
            </summary>
            <param name="id">The student id</param>
        </member>
        <member name="M:Gordon360.Controllers.MyScheduleController.Get">
            <summary>
             Gets all custom events for a user
            </summary>
            <returns>A IEnumerable of custom events</returns>
        </member>
        <member name="M:Gordon360.Controllers.MyScheduleController.GetByEventId(System.String)">
            <summary>
             Gets specific custom event for a user
            </summary>
            <returns>The requested custom event</returns>
        </member>
        <member name="M:Gordon360.Controllers.MyScheduleController.Get(System.String)">
            <summary>
             Gets all myschedule objects for a user
            </summary>
            <returns>A IEnumerable of myschedule objects</returns>
        </member>
        <member name="M:Gordon360.Controllers.MyScheduleController.Post(Gordon360.Models.CCT.MYSCHEDULE)">
            <summary>Create a new myschedule to be added to database</summary>
            <param name="mySchedule">The myschedule item containing all required and relevant information</param>
            <returns>Created schedule</returns>
            <remarks>Posts a new myschedule to the server to be added into the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MyScheduleController.Delete(System.String)">
            <summary>Delete an existing myschedule item</summary>
            <param name="eventID">The identifier for the myschedule to be deleted</param>
            <remarks>Calls the server to make a call and remove the given myschedule from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.MyScheduleController.Put(Gordon360.Models.CCT.MYSCHEDULE)">
            <summary>Update the existing myschedule in database</summary>
            <param name="mySchedule">The updated myschedule item containing all required and relevant information</param>
            <returns>Original schedule</returns>
            <remarks>Put a myschedule to the server to be updated</remarks>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetByID(System.Int32)">
            <summary>Gets a news item by id from the database</summary>
            <param name="newsID">The id of the news item to retrieve</param>
            <returns>The news item</returns>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetNotExpiredAsync">
            Call the service that gets all approved student news entries not yet expired, filtering
            out the expired by comparing 2 weeks past date entered to current date
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetNewAsync">
            Call the service that gets all new and approved student news entries
            which have not already expired,
            checking novelty by comparing an entry's date entered to 10am on the previous day
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetCategories">
            Call the service that gets the list of categories
        </member>
        <member name="M:Gordon360.Controllers.NewsController.GetNewsPersonalUnapprovedAsync">
            Call the service that gets all unapproved student news entries (by a particular user)
            not yet expired, filtering out the expired news
            @TODO: Remove redundant username/id from this and service
            @TODO: fix documentation comments
        </member>
        <member name="M:Gordon360.Controllers.NewsController.Post(System.String,System.Int32,System.String,System.String)">
            Create a new news item to be added to the database
            @TODO: Remove redundant username/id from this and service
            @TODO: fix documentation comments
        </member>
        <member name="M:Gordon360.Controllers.NewsController.Delete(System.Int32)">
            <summary>Deletes a news item from the database</summary>
            <param name="newsID">The id of the news item to delete</param>
            <returns>The deleted news item</returns>
            <remarks>The news item must be authored by the user and must not be expired</remarks>
        </member>
        <member name="M:Gordon360.Controllers.NewsController.EditPosting(System.Int32,Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            (Controller) Edits a news item in the database
            </summary>
            <param name="newsID">The id of the news item to edit</param>
            <param name="newData">The news object that contains updated values</param>
            <returns>The updated news item</returns>
            <remarks>The news item must be authored by the user and must not be expired and must be unapproved</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.Get">
            <summary>Get profile info of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetUserProfile(System.String)">
            <summary>Get public profile info for a user</summary>
            <param name="username">username of the profile info</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetAdvisorsAsync(System.String)">
            <summary>Get the advisor(s) of a particular student</summary>
             <returns>
             All advisors of the given student.  For each advisor,
             provides first name, last name, and username.
             </returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetCliftonStrengths(System.String)">
            <summary> Gets the clifton strengths of a particular user </summary>
            <param name="username"> The username for which to retrieve info </param>
            <returns> Clifton strengths of the given user. </returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetMyImgAsync">
            <summary>Get the profile image of currently logged in user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.GetImgAsync(System.String)">
            <summary>Get the profile image of the given user</summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.ResetImage">
            <summary>
            Reset the profile Image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateLink(System.String,Gordon360.Models.CCT.CUSTOM_PROFILE)">
            <summary>
            Update the profile social media links
            </summary>
            <param name="type">The type of social media</param>
            <param name="path">The path of the links</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateMobilePrivacy(System.String)">
            <summary>
            Update privacy of mobile phone number
            </summary>
            <param name="value">Y or N</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ProfilesController.UpdateImagePrivacy(System.String)">
            <summary>
            Update privacy of profile image
            </summary>
            <param name="value">Y or N</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Get">
            <summary>
            Gets all Membership Request Objects
            </summary>
            <returns>List of all requests for membership</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Get(System.Int32)">
            <summary>
             Gets a specific Membership Request Object
            </summary>
            <param name="id">The ID of the membership request</param>
            <returns>A memberships request with the specified id</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.GetMembershipsRequestsForActivity(System.String)">
            <summary>
            Gets the memberships requests for the specified activity
            </summary>
            <param name="id">The activity code</param>
            <returns>All membership requests associated with the activity</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.GetMembershipsRequestsForStudent">
            <summary>
            Gets the memberships requests for the person making the request
            </summary>
            <returns>All membership requests associated with the student</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Post(Gordon360.Models.CCT.REQUEST)">
            <summary>
            Creates a new membership request
            </summary>
            <param name="membershipRequest">The request to be added</param>
            <returns>The added request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Put(System.Int32,Gordon360.Models.CCT.REQUEST)">
            <summary>
            Updates a membership request
            </summary>
            <param name="id">The membership request id</param>
            <param name="membershipRequest">The updated membership request object</param>
            <returns>The updated request if successful. HTTP error message if not.</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.ApproveRequest(System.Int32)">
            <summary>
            Sets a membership request to Approved
            </summary>
            <param name="id">The id of the membership request in question.</param>
            <returns>If successful: THe updated membership request wrapped in an OK Http status code.</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.DenyRequest(System.Int32)">
            <summary>
            Sets the membership request to Denied
            </summary>
            <param name="id">The id of the membership request in question.</param>
            <returns>If successful: The updated membership request wrapped in an OK Http status code.</returns>
        </member>
        <member name="M:Gordon360.Controllers.RequestsController.Delete(System.Int32)">
            <summary>
            Deletes a membership request
            </summary>
            <param name="id">The id of the membership request to delete</param>
            <returns>The deleted object</returns>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.GetUpcomingRides">
            <summary>
             Gets all upcoming ride objects
            </summary>
            <returns>A IEnumerable of rides objects</returns>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.GetUpcomingRidesForUser">
            <summary>
             Gets all upcoming ride objects for a user
            </summary>
            <returns>A IEnumerable of rides objects</returns>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.PostRide(Gordon360.Models.CCT.Save_Rides)">
            <summary>
             Create new ride object for a user
            </summary>
            <returns>Successfully posted ride object</returns>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.CancelRideAsync(System.String)">
            <summary>Cancel an existing ride item</summary>
            <param name="rideID">The identifier for the ride to be cancel</param>
            <remarks>Calls the server to make a call and remove the given ride from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.DeleteRideAsync(System.String)">
            <summary>Delete an existing ride item</summary>
            <param name="rideID">The identifier for the ride to be deleted</param>
            <remarks>Calls the server to make a call and remove the given ride from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.PostBooking(Gordon360.Models.CCT.Save_Bookings)">
            <summary>
             Create new booking object for a user
            </summary>
            <returns>Successfully posted booking object</returns>
        </member>
        <member name="M:Gordon360.Controllers.SaveController.DeleteBooking(System.String)">
            <summary>Delete an existing booking item</summary>
            <param name="rideID">The identifier for the booking to be deleted</param>
            <remarks>Calls the server to make a call and remove the given booking from the database</remarks>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleControlController.Get">
            <summary>
            Get schedule information of logged in user
            Info one gets: privacy, time last updated, description, and Gordon ID
            @TODO: Use Service Layer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleControlController.Get(System.String)">
            <summary>
            Get schedule information of specific user
            Info one gets: privacy, time last updated, description, and Gordon ID
            @TODO Use Service Layer
            </summary>
            <param name="username">username</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleControlController.UpdateSchedulePrivacy(System.String)">
            <summary>
            Update privacy of schedule
            </summary>
            <param name="value">Y or N</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleControlController.UpdateDescription(System.String)">
            <summary>
            Update schedule description
            </summary>
            <param name="value">New description</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleController.Get">
            <summary>
             Gets all schedule objects for a user
            </summary>
            <returns>A IEnumerable of schedule objects</returns>
        </member>
        <member name="M:Gordon360.Controllers.ScheduleController.Get(System.String)">
            <summary>
             Gets all schedule objects for a user
            </summary>
            <returns>A IEnumerable of schedule objects</returns>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.Get">
            <summary>Get a list of all sessions</summary>
            <returns>All sessions within the database</returns>
            <remarks>Queries the database for all sessions, current and past</remarks>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.Get(System.String)">
            <summary>Get one specific session specified by the id in the URL string</summary>
            <param name="id">The identifier for one specific session</param>
            <returns>The information about one specific session</returns>
            <remarks>Queries the database regarding a specific session with the given identifier</remarks>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.GetCurrentSessionAsync">
            <summary>
            Gets the current active session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.SessionsController.GetDaysLeftInSemesterAsync">
            <summary>
            Gets the days left in the current semester
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Controllers.StudentEmploymentController.Get">
            <summary>
             Gets student employment information about the user
            </summary>
            <returns>A Student Employment Json</returns>
        </member>
        <member name="T:Gordon360.Controllers.VersionController">
            <summary>
            Get the short git SHA-1 and build date for the backend
            </summary>
            <returns>"Git Hash: {hashCode}; Build Time: {date and time}"</returns>
            <remarks></remarks>
        </member>
        <member name="M:Gordon360.Controllers.VictoryPromiseController.Get">
            <summary>
             Gets current victory promise scores
            </summary>
            <returns>A VP Json</returns>
        </member>
        <member name="T:Gordon360.Controllers.WellnessController.WellnessStatusColor">
            <summary>
            Enum representing three possible wellness statuses.
            GREEN - Healthy, no known contact/symptoms
            YELLOW - Symptomatic or cautionary hold
            RED - Quarantine/Isolation
            </summary>
        </member>
        <member name="M:Gordon360.Controllers.WellnessController.Get">
            <summary>
             Gets wellness status of current user
            </summary>
            <returns>A WellnessViewModel representing the most recent status of the user</returns>
        </member>
        <member name="M:Gordon360.Controllers.WellnessController.GetQuestion">
            <summary>
             Gets question for wellness check from the back end
            </summary>
            <returns>A WellnessQuestionViewModel</returns>
        </member>
        <member name="M:Gordon360.Controllers.WellnessController.Post(Gordon360.Controllers.WellnessController.WellnessStatusColor)">
            <summary>
             Stores the user's wellness status
             @TODO: Return view model rather than Health_Status model directly
            </summary>
            <param name="status">The current status of the user to post, of type WellnessStatusColor</param>
            <returns>The status that was stored in the database</returns>
        </member>
        <member name="P:Gordon360.Models.StudentTimesheets.student_timesheets.ID_NUM">
            <summary>
            Gordon ID Number
            </summary>
        </member>
        <member name="P:Gordon360.Models.StudentTimesheets.student_timesheets.eml">
            <summary>
            a job&apos;s unique id number
            </summary>
        </member>
        <member name="T:Gordon360.Services.AccountService">
            <summary>
            Service Class that facilitates data transactions between the AccountsController and the Account database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByID(System.String)">
            <summary>
            Fetches a single account record whose id matches the id provided as an argument
            </summary>
            <param name="id">The person's gordon id</param>
            <returns>AccountViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAll">
            <summary>
            Fetches all the account records from storage.
            </summary>
            <returns>AccountViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByEmail(System.String)">
            <summary>
            Fetches the account record with the specified email.
            </summary>
            <param name="email">The email address associated with the account.</param>
            <returns>the student account information</returns>
        </member>
        <member name="M:Gordon360.Services.AccountService.GetAccountByUsername(System.String)">
            <summary>
            Fetches the account record with the specified username.
            </summary>
            <param name="username">The AD username associated with the account.</param>
            <returns>the student account information</returns>
        </member>
        <member name="T:Gordon360.Services.ActivityService">
            <summary>
            Service Class that facilitates data transactions between the ActivitiesController and the ACT_INFO database model.
            ACT_INFO is basically a copy of the ACT_CLUB_DEF domain model in TmsEPrd but with extra fields that we want to store (activity image, blurb etc...)
            Activity Info and ACtivity may be talked about interchangeably.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Get(System.String)">
            <summary>
            Fetches a single activity record whose id matches the id provided as an argument
            </summary>
            <param name="activityCode">The activity code</param>
            <returns>ActivityViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivitiesForSessionAsync(System.String)">
            <summary>
            Fetches the Activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="sessionCode">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetActivityTypesForSessionAsync(System.String)">
            <summary>
            Fetches the Activity types of activities that are active during the session whose code is specified as parameter.
            </summary>
            <param name="sessionCode">The session code</param>
            <returns>ActivityViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetAll">
            <summary>
            Fetches all activity records from storage.
            </summary>
            <returns>ActivityViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.IsOpen(System.String,System.String)">
            <summary>
            Checks to see if a specified activity is still open for this session
            Note: the way we know that an activity is open or closed is by the column END_DTE in MEMBERSHIP table
            When an activity is closed out, the END_DTE is set to the date on which the closing happened
            Otherwise, the END_DTE for all memberships of the activity will be null for that session
            </summary>
            <param name="activityCode">The activity code for the activity in question</param>
            <param name="sessionCode">Code of the session to check</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetOpenActivities(System.String)">
            <summary>
            Gets a collection of all the current open activities, by finding which activities have 
            memberships with an END_DTE that is null
            </summary>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetOpenActivities(System.String,System.Int32)">
            <summary>
            Gets a collection of all the current open activities for which a given user is group admin, by finding which activities have 
            memberships with an END_DTE that is null
            </summary>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetClosedActivities(System.String)">
            <summary>
            Gets a collection of all the current activities already closed out, by finding which activities have 
            memberships with an END_DTE that is not null
            </summary>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.GetClosedActivities(System.String,System.Int32)">
            <summary>
            Gets a collection of all the current closed activities for which a given user is group admin, by finding which activities have 
            memberships with an END_DTE that is not null
            </summary>
            <param name="gordonID">The user's id</param>
            <param name="sess_cde">The session we want to get the closed activities for</param>
            <returns>The collection of activity codes for open activities</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.Update(System.String,Gordon360.Models.CCT.ACT_INFO)">
            <summary>
            Updates the Activity Info 
            </summary>
            <param name="activity">The activity info resource with the updated information</param>
            <param name="activityCode">The id of the activity info to be updated</param>
            <returns>The updated activity info resource</returns>
        </member>
        <member name="M:Gordon360.Services.ActivityService.CloseOutActivityForSession(System.String,System.String)">
            <summary>
            Closes out a specific activity for a specific session
            </summary>
            <param name="activityCode">The activity code for the activity that will be closed</param>
            <param name="sess_cde">The session code for the session where the activity is being closed</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.OpenActivityForSession(System.String,System.String)">
            <summary>
            Open a specific activity for a specific session
            </summary>
            <param name="activityCode">The activity code for the activity that will be closed</param>
            <param name="sess_cde">The session code for the session where the activity is being closed</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.UpdateActivityImage(System.String,System.String)">
            <summary>
            Sets the path for the activity image.
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="path"></param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.ResetActivityImage(System.String)">
            <summary>
            Reset the path for the activity image
            </summary>
            <param name="activityCode">The activity code</param>
        </member>
        <member name="M:Gordon360.Services.ActivityService.TogglePrivacy(System.String,System.Boolean)">
            <summary>
            change activty privacy
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="isPrivate">activity private or not</param>
        </member>
        <member name="T:Gordon360.Services.AdministratorService">
            <summary>
            Service class to facilitate interacting with the Admin table.
            </summary>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Get(System.Int32)">
            <summary>
            Fetches the admin resource whose id is specified as an argument.
            </summary>
            <param name="id">The admin ID.l</param>
            <returns>The Specified administrator. If none was found, a null value is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Get(System.String)">
            <summary>
            Fetches the admin resource whose username matches the specified argument
            </summary>
            <param name="gordon_id">The administrator's gordon id</param>
            <returns>The Specified administrator. If none was found, a null value is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.GetAll">
            <summary>
            Fetches all the administrators from the database
            </summary>
            <returns>Returns a list of administrators. If no administrators were found, an empty list is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Add(Gordon360.Models.CCT.ADMIN)">
            <summary>
            Adds a new Administrator record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the validateAdmin() method.
            </summary>
            <param name="admin">The admin to be added</param>
            <returns>The newly added Admin object</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.Delete(System.Int32)">
            <summary>
            Delete the admin whose id is specified by the parameter.
            </summary>
            <param name="id">The admin id</param>
            <returns>The admin that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.AdministratorService.validateAdmin(Gordon360.Models.CCT.ADMIN)">
            <summary>
            Helper method to Validate an admin
            </summary>
            <param name="admin">The admin to validate</param>
            <returns>True if the admin is valid. Throws ResourceNotFoundException if not. Exception is cauth in an Exception Filter</returns>
        </member>
        <member name="T:Gordon360.Services.ContentManagementService">
            <summary>
            Service class that facilitates data (specifically, site content) passing between the ContentManagementController and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ContentManagementService.DEPRECATED_GetSliderContent">
            <summary>
            Fetches the dashboard slider content from the database.
            </summary>
            <returns>If found, returns a set of SliderViewModel's, based on each slide entry in the db. 
            If not returns an empty IEnumerable.</returns>
        </member>
        <member name="T:Gordon360.Services.DiningService">
            <summary>
            Service that allows for meal control
            </summary>
        </member>
        <member name="M:Gordon360.Services.DiningService.GetBalance(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="cardHolderID"></param>
            <param name="planID"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.DiningService.GetDiningPlanInfo(System.Int32,System.String)">
            <summary>
            Get information about the selected plan for the student user
            </summary>
            <param name="cardHolderID">Student's Gordon ID</param>
            <param name="sessionCode">Current Session Code</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.EmailService">
            <summary>
            Service class to facilitate getting emails for members of an activity.
            </summary>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityAsync(System.String)">
            <summary>
            Get a list of the emails for all members in the activity during the current session.
            </summary>
            <param name="activity_code"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForGroupAdminAsync(System.String)">
            <summary>
            Get a list of emails for group admin in the activity during the current session.
            </summary>
            <param name="activityCode"></param>
            <returns>A collection of group admin emails</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForGroupAdminAsync(System.String,System.String)">
            <summary>
            Get a list of emails for group admin in the activity during a specified session.
            </summary>
            <param name="activityCode"></param>
            <param name="sessionCode"></param>
            <returns>A collection of the group admin emails</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityLeadersAsync(System.String)">
            <summary>
            Get a list of emails for leaders in the activity during the current session.
            </summary>
            <param name="activityCode"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityAdvisorsAsync(System.String)">
            <summary>
            Get a list of emails for advisors in the activity during the current session.
            </summary>
            <param name="activityCode"></param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityAsync(System.String,System.String)">
            <summary>
            Get a list of the emails for all members in the activity during a specific session
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="sessionCode">The session code</param>
            <returns>List of the emails for the members of this activity</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityLeadersAsync(System.String,System.String)">
            <summary>
            Get a list of emails for leaders in the activity during a specified session
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="sessionCode">The session code</param>
            <returns>List of emails for the leaders of this activity</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.GetEmailsForActivityAdvisorsAsync(System.String,System.String)">
            <summary>
            Get a list of emails for leaders in the activity during a specified session
            </summary>
            <param name="activityCode">The activity code</param>
            <param name="sessionCode">The session code</param>
            <returns>List of emails for the leaders of this activity</returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.SendEmails(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
            Send a email to a list of email addresses
            </summary>
            <param name="to_emails">All addresses to send this email to</param>
            <param name="from_email">The address this email is sent from</param>
            <param name="subject">Subject of the email to be sent</param>
            <param name="email_content">The content of the email to be sent</param>
            <param name="password">Password of the email sender</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EmailService.SendEmailToActivityAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send a email to members of an activity
            </summary>
            <param name="activityCode">The activity code to send this email to</param>
            <param name="sessionCode">The session of activity to select members from</param>
            <param name="from_email">The address this email is sent from</param>
            <param name="subject">Subject of the email to be sent</param>
            <param name="email_content">The content of the email to be sent</param>
            <param name="password">Password of the email sender</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.ErrorLogService">
            <summary>
            Service Class that facilitates data transactions between the ErrorLogController and the ERROR_LOG database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ErrorLogService.Add(Gordon360.Models.CCT.ERROR_LOG)">
            <summary>
            Adds a new error log to storage.
            </summary>
            <param name="error_log">The error log to be added</param>
            <returns>The newly added error_log object</returns>
        </member>
        <member name="M:Gordon360.Services.ErrorLogService.Log(System.String)">
            <summary>
            Adds a new error log to storage, after creating the timestamp.
            </summary>
            <param name="error_message">The error message for the error log to be added</param>
            <returns>The newly added error_log object</returns>
        </member>
        <member name="T:Gordon360.Services.EventService">
            <summary>
            Service that allows for event control
            </summary>
        </member>
        <member name="F:Gordon360.Services.EventService.AllEventsURL">
            URL to retrieve events from the 25Live API. 
            event_type_id parameter fetches only events of type 14 (Calendar Announcement) and 57 (Event).
            All other event types are not appropiate for the 360 events feed.
            end_after parameter  limits the request to events from the current academic year.
            state parameter fetches only confirmed events
        </member>
        <member name="M:Gordon360.Services.EventService.GetAllEvents">
            <summary>
            Access the memory stream created by the cached task and parse it into events
            </summary>
            <returns>All events for the current academic year.</returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetPublicEvents">
            <summary>
            Select only events that are marked for Public promotion
            </summary>
            <returns>All Public Events</returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetCLAWEvents">
            <summary>
            Select only events that are Approved to give CLAW credit
            </summary>
            <returns>All CLAW Events</returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetEventsForStudentByTermAsync(System.String,System.String)">
            <summary>
            Returns all attended events for a student in a specific term
            </summary>
            <param name="username"> The student's AD Username</param>
            <param name="term"> The current term</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.EventService.GetFirstEventDate">
            <summary>
             Helper function to determine the current academic year
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.CheckIfHousingAdmin(System.String)">
            <summary>
            Calls a stored procedure that returns a row in the staff whitelist which has the given user id,
            if it is in the whitelist
            </summary>
            <param name="gordonID"> The id of the person using the page </param>
            <returns> Whether or not the user is on the staff whitelist </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.AddHousingAdmin(System.String)">
            <summary>
            Inserts the given id into the whitelist table
            </summary>
            <param name="gordonID"> The id to insert </param>
            <returns> Whether or not this was successful </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.RemoveHousingAdmin(System.String)">
            <summary>
            Deletes the given id from the whitelist table
            </summary>
            <param name="gordonID"> The id to remove </param>
            <returns> Whether or not this was successful </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.DeleteApplication(System.Int32)">
            <summary>
            Deletes the application with given id,
            removing all rows that reference it.
            </summary>
            <param name="applicationID"> The id of the application to delete </param>
            <returns> Whether or not this was successful </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetAllApartmentHalls">
            <summary>
            Gets all names of apartment halls
            </summary>
            <returns> AN array of hall names </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetApplicationID(System.String,System.String)">
            <summary>
            Calls a stored procedure that tries to get the id of an the application that a given user is 
            applicant on for a given session
            </summary>
            <param name="username"> The student username to look for </param>
            <param name="sess_cde"> Session for which the application would be </param>
            <returns> 
            The id of the application or 
            null if the user is not on an application for that session 
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetEditorUsername(System.Int32)">
            <summary>
            Get the editor ID of a given application ID
            </summary>
            <param name="applicationID"> The application ID for which the editor ID would be </param>
            <returns>
            The id of the editor or
            null if the user is a member but not an editor of a given application
            </returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.SaveApplication(System.String,System.String,System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentApplicantViewModel},System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentChoiceViewModel})">
             <summary>
             Saves student housing info
             - first, it creates a new row in the applications table and inserts the username of the primary applicant and a timestamp
             - second, it retrieves the application id of the application with the information we just inserted (because
             the database creates the application ID so we have to ask it which number it generated for it)
             - third, it inserts each applicant into the applicants table along with the application ID so we know
             which application on which they are an applicant
            
             </summary>
             <param name="sess_cde"> The current session code </param>
             <param name="editorUsername"> The student username of the student who is declared to be the editor of this application (retrieved from the JSON from the front end) </param>
             <param name="apartmentApplicants"> Array of JSON objects providing apartment applicants </param>
             <param name="apartmentChoices"> Array of JSON objects providing apartment hall choices </param>
             <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.EditApplication(System.String,System.String,System.Int32,System.String,System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentApplicantViewModel},System.Collections.Generic.List{Gordon360.Models.ViewModels.ApartmentChoiceViewModel})">
             <summary>
             Edit an existings apartment application
             - first, it gets the EditorUsername from the database for the given application ID and makes sure that the student username of the current user matches that stored username
             - second, it gets an array of the applicants that are already stored in the database for the given application ID
             - third, it inserts each applicant that is in the 'newApplicantIDs' array but was not yet in the database
             - fourth, it removes each applicant that was stored in the database but was not in the 'newApplicantIDs' array
            
             </summary>
             <param name="username"> The student username of the user who is attempting to save the apartment application (retrieved via authentication token) </param>
             <param name="sess_cde"> The current session code </param>
             <param name="applicationID"> The application ID number of the application to be edited </param>
             <param name="newEditorUsername"> The student username of the student who is declared to be the editor of this application (retrieved from the JSON from the front end) </param>
             <param name="newApartmentApplicants"> Array of JSON objects providing apartment applicants </param>
             <param name="newApartmentChoices"> Array of JSON objects providing apartment hall choices </param>
             <returns>Returns the application ID number if all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.ChangeApplicationEditor(System.String,System.Int32,System.String)">
             <summary>
             Changes the student user who has permission to edit the given application
            
             </summary>
             <returns>Whether or not all the queries succeeded</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetApartmentApplication(System.Int32,System.Boolean)">
            <param name="applicationID">application ID number of the apartment application</param>
            <param name="isAdmin">boolean indicating whether the current user is an admin, permits access to restricted information such as birth date</param>
            <returns>Object of type ApartmentApplicationViewModel</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.GetAllApartmentApplication">
            <returns>Array of ApartmentApplicationViewModel Objects</returns>
        </member>
        <member name="M:Gordon360.Services.HousingService.ChangeApplicationDateSubmitted(System.Int32)">
            <summary>
            "Submit" an application by changing its DateSubmitted value to the date the submit button is succesfully clicked
            </summary>
            <param name="applicationID"> The application ID number of the application to be submitted </param>
            <returns>Returns whether the query succeeded</returns>
        </member>
        <member name="T:Gordon360.Services.JobsService">
            <summary>
            Service Class that facilitates data transactions between the JobsController and the student_timesheets + paid_shifts database model.
            </summary>
        </member>
        <member name="T:Gordon360.Services.MembershipRequestService">
            <summary>
            Service class to facilitate data transactions between the MembershipRequestController and the database
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Add(Gordon360.Models.CCT.REQUEST)">
            <summary>
            Generate a new request to join an activity at a participation level higher than 'Guest'
            </summary>
            <param name="membershipRequest">The membership request object</param>
            <returns>The membership request object once it is added</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.ApproveRequest(System.Int32)">
            <summary>
            Approves the request with the specified ID.
            </summary>
            <param name="requestID">The ID of the request to be approved</param>
            <returns>The approved membership</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Delete(System.Int32)">
            <summary>
            Delete the membershipRequest object whose id is given in the parameters 
            </summary>
            <param name="requestID">The membership request id</param>
            <returns>A copy of the deleted membership request</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.DenyRequest(System.Int32)">
            <summary>
            Denies the membership request object whose id is given in the parameters
            </summary>
            <param name="requestID">The membership request id</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetAsync(System.Int32)">
            <summary>
            Get the membership request object whose Id is specified in the parameters.
            </summary>
            <param name="requestID">The membership request id</param>
            <returns>If found, returns MembershipRequestViewModel. If not found, returns null.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetAllAsync">
            <summary>
            Fetches all the membership request objects from the database.
            </summary>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsForActivityAsync(System.String)">
            <summary>
            Fetches all the membership requests associated with this activity
            </summary>
            <param name="activityCode">The activity id</param>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.GetMembershipRequestsForStudentAsync(System.String)">
            <summary>
            Fetches all the membership requests associated with this student
            </summary>
            <param name="gordonID">The student id</param>
            <returns>MembershipRequestViewModel IEnumerable. If no records are found, returns an empty IEnumerable.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipRequestService.Update(System.Int32,Gordon360.Models.CCT.REQUEST)">
            <summary>
            Update an existing membership request object
            </summary>
            <param name="requestID">The membership request id</param>
            <param name="membershipRequest">The newly modified membership request</param>
            <returns></returns>
        </member>
        <member name="T:Gordon360.Services.MembershipService">
            <summary>
            Service Class that facilitates data transactions between the MembershipsController and the Membership database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Add(Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>
            Adds a new Membership record to storage. Since we can't establish foreign key constraints and relationships on the database side,
            we do it here by using the validateMembership() method.
            </summary>
            <param name="membership">The membership to be added</param>
            <returns>The newly added Membership object</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Delete(System.Int32)">
            <summary>
            Delete the membership whose id is specified by the parameter.
            </summary>
            <param name="membershipID">The membership id</param>
            <returns>The membership that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetSpecificMembership(System.Int32)">
            <summary>	
            Fetch the membership whose id is specified by the parameter	
            </summary>	
            <param name="membershipID">The membership id</param>	
            <returns>MembershipViewModel if found, null if not found</returns>	
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetAllAsync">
            <summary>
            Fetches all membership records from storage.
            </summary>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipsForActivityAsync(System.String)">
            <summary>
            Fetches the memberships associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetGroupAdminMembershipsForActivityAsync(System.String)">
            <summary>
            Fetches the group admin (who have edit privileges of the page) of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetLeaderMembershipsForActivityAsync(System.String)">
            <summary>
            Fetches the leaders of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetAdvisorMembershipsForActivityAsync(System.String)">
            <summary>
            Fetches the advisors of the activity whose activity code is specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <returns>MembershipViewModel IEnumerable. If no records were found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetMembershipsForStudentAsync(System.String)">
            <summary>
            Fetches all the membership information linked to the student whose id appears as a parameter.
            </summary>
            <param name="username">The student's AD Username.</param>
            <returns>A MembershipViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetActivityFollowersCountAsync(System.String)">
            <summary>
            Fetches the number of followers associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <returns>int.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetActivityMembersCountAsync(System.String)">
            <summary>
            Fetches the number of memberships associated with the activity whose code is specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <returns>int.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetActivityFollowersCountForSessionAsync(System.String,System.String)">
            <summary>
            Fetches the number of followers associated with the activity and session whose codes are specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <param name="sessionCode">The session code</param>
            <returns>int.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.GetActivityMembersCountForSessionAsync(System.String,System.String)">
            <summary>
            Fetches the number of memberships associated with the activity and session whose codes are specified by the parameter.
            </summary>
            <param name="activityCode">The activity code.</param>
            <param name="sessionCode">The session code</param>
            <returns>int.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.Update(System.Int32,Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>
            Updates the membership whose id is given as the first parameter to the contents of the second parameter.
            </summary>
            <param name="membershipID">The membership id.</param>
            <param name="membership">The updated membership.</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.ToggleGroupAdmin(System.Int32,Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>
            Switches the group-admin property of the person whose membership id is given
            </summary>
            <param name="membershipID">The membership id.</param>
            <param name="membership">The corresponding membership object</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.TogglePrivacy(System.Int32,System.Boolean)">
            <summary>
            Switches the privacy property of the person whose membership id is given
            </summary>
            <param name="membershipID">The membership id.</param>
            <param name="isPrivate">membership private or not</param>
            <returns>The newly modified membership.</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.ValidateMembershipAsync(Gordon360.Models.CCT.MEMBERSHIP)">
            <summary>
            Helper method to Validate a membership
            </summary>
            <param name="membership">The membership to validate</param>
            <returns>True if the membership is valid. Throws ResourceNotFoundException if not. Exception is caught in an Exception Filter</returns>
        </member>
        <member name="M:Gordon360.Services.MembershipService.IsGroupAdmin(System.Int32)">
            <summary>	
            Determines whether or not the given user is a Group Admin of some activity	
            </summary>
            <param name="gordonID">Gordon ID of the user to check</param>	
            <returns>true if student is a Group Admin, else false</returns>	
        </member>
        <member name="T:Gordon360.Services.MyScheduleService">
            <summary>
            Service Class that facilitates data transactions between the MySchedulesController and the MySchedule part of the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.MyScheduleService.GetForID(System.String,System.String)">
            <summary>
            Fetch the myschedule item whose id is specified by the parameter
            </summary>
            <param name="eventID">The myschedule id</param>
            <param name="username">AD Username</param>
            <returns>Myschedule if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.MyScheduleService.GetAllForUser(System.String)">
            <summary>
            Fetch all myschedule items belonging to the given user
            </summary>
            <param name="username">The AD Username</param>
            <returns>Array of Myschedule if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.MyScheduleService.Add(Gordon360.Models.CCT.MYSCHEDULE)">
            <summary>
            Adds a new mySchedule record to storage.
            </summary>
            <param name="mySchedule">The membership to be added</param>
            <returns>The newly added custom event</returns>
        </member>
        <member name="M:Gordon360.Services.MyScheduleService.Delete(System.String,System.String)">
            <summary>
            Delete the myschedule whose id is specified by the parameter.
            </summary>
            <param name="eventID">The myschedule id</param>
            <param name="username">The gordon id</param>
            <returns>The myschedule that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.MyScheduleService.Update(Gordon360.Models.CCT.MYSCHEDULE)">
            <summary>
            Update the myschedule item.
            </summary>
            <param name="sched">The schedule information</param>
            <returns>The original schedule</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.Get(System.Int32)">
            <summary>
            Gets a news item entity by id
            NOTE: Also a helper method, hence why it returns a StudentNews model
            rather than a StudentNewsViewModel - must be casted as the latter in its own
            controller
            </summary>
            <param name="newsID">The SNID (id of news item)</param>
            <returns>The news item</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.GetNewsPersonalUnapprovedAsync(System.String)">
            <summary>
            Gets unapproved unexpired news submitted by user.
            </summary>
            <param name="username">username</param>
            <returns>Result of query</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.SubmitNews(Gordon360.Models.MyGordon.StudentNews,System.String)">
            <summary>
            Adds a news item record to storage.
            </summary>
            <param name="newsItem">The news item to be added</param>
            <param name="username">username</param>
            <returns>The newly added Membership object</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.DeleteNews(System.Int32)">
            <summary>
            (Service) Deletes a news item from the database
            </summary>
            <param name="newsID">The id of the news item to delete</param>
            <returns>The deleted news item</returns>
            <remarks>The news item must be authored by the user and must not be expired</remarks>
        </member>
        <member name="M:Gordon360.Services.NewsService.EditPosting(System.Int32,Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            (Service) Edits a news item in the database
            </summary>
            <param name="newsID">The id of the news item to edit</param>
            <param name="newData">The news object that contains updated values</param>
            <returns>The updated news item's view model</returns>
            <remarks>The news item must be authored by the user and must not be expired and must be unapproved</remarks>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerifyUnapproved(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to verify that a given news item has not yet been approved
            </summary>
            <param name="newsItem">The news item to verify</param>
            <returns>true if unapproved, otherwise throws some kind of meaningful exception</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerifyUnexpired(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to verify that a given news item has not expired 
            (see documentation for expiration definition)
            </summary>
            <param name="newsItem">The news item to verify</param>
            <returns>true if unexpired, otherwise throws some kind of meaningful exception</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.ValidateNewsItem(Gordon360.Models.MyGordon.StudentNews)">
            <summary>
            Helper method to validate a news item
            </summary>
            <param name="newsItem">The news item to validate</param>
            <returns>True if valid. Throws ResourceNotFoundException if not. Exception is caught in an Exception Filter</returns>
        </member>
        <member name="M:Gordon360.Services.NewsService.VerifyAccount(System.String)">
            <summary>
            Verifies that a student account exists
            </summary>
            <param name="username">The AD Username of the student</param>
            <returns>true if account exists, ResourceNotFoundException if null</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetStudentProfileByUsername(System.String)">
            <summary>
            get student profile info
            </summary>
            <param name="username">username</param>
            <returns>StudentProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetFacultyStaffProfileByUsername(System.String)">
            <summary>
            get faculty staff profile info
            </summary>
            <param name="username">username</param>
            <returns>FacultyStaffProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetAlumniProfileByUsername(System.String)">
            <summary>
            get alumni profile info
            </summary>
            <param name="username">username</param>
            <returns>AlumniProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetAdvisorsAsync(System.String)">
            <summary>
            get advisors for particular student
            </summary>
            <param name="username">AD username</param>
            <returns></returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetCliftonStrengths(System.Int32)">
            <summary> Gets the clifton strengths of a particular user </summary>
            <param name="id"> The id of the user for which to retrieve info </param>
            <returns> Clifton strengths of the given user. </returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetPhotoPathAsync(System.String)">
            <summary>
            Get photo path for profile
            </summary>
            <param name="username">AD username</param>
            <returns>PhotoPathViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.GetCustomUserInfo(System.String)">
            <summary>
            Fetches a single profile whose username matches the username provided as an argument
            </summary>
            <param name="username">The username</param>
            <returns>ProfileViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateProfileImageAsync(System.String,System.String,System.String)">
            <summary>
            Sets the path for the profile image.
            </summary>
            <param name="username">AD Username</param>
            <param name="path"></param>
            <param name="name"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateProfileLinkAsync(System.String,System.String,Gordon360.Models.CCT.CUSTOM_PROFILE)">
            <summary>
            Sets the path for the profile links.
            </summary>
            <param name="username">The username</param>
            <param name="type"></param>
            <param name="path"></param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateMobilePrivacyAsync(System.String,System.String)">
            <summary>
            privacy setting of mobile phone.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">Y or N</param>
        </member>
        <member name="M:Gordon360.Services.ProfileService.UpdateImagePrivacyAsync(System.String,System.String)">
            <summary>
            privacy setting user profile photo.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">Y or N</param>
        </member>
        <member name="M:Gordon360.Services.SaveService.GetUpcoming(System.String)">
            <summary>
            Fetch all upcoming ride items
            </summary>
            <returns> IEnumerable of ride items if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.SaveService.GetUpcomingForUser(System.String)">
            <summary>
            Fetch the ride items a user is part of
            </summary>
            <param name="gordon_id">The ride id</param>
            <returns> ride items if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.SaveService.AddRideAsync(Gordon360.Models.CCT.Save_Rides,System.String)">
            <summary>
            Adds a new ride record to storage.
            </summary>
            <param name="newRide">The Save_Rides object to be added</param>
            <param name="gordon_id">The gordon_id of the user creating the ride</param>
            <returns>The newly added custom event</returns>
        </member>
        <member name="M:Gordon360.Services.SaveService.DeleteRideAsync(System.String,System.String)">
            <summary>
            Delete the ride whose id is specified by the parameter.
            </summary>
            <param name="rideID">The myschedule id</param>
            <param name="gordon_id">The gordon id</param>
            <returns>The myschedule that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.SaveService.CancelRideAsync(System.String,System.String)">
            <summary>
            Cancel the ride whose id is specified by the parameter.
            </summary>
            <param name="rideID">The ride id</param>
            <param name="gordon_id">The gordon id</param>
            <returns>The ride that was just deleted</returns>
        </member>
        <member name="M:Gordon360.Services.SaveService.AddBookingAsync(Gordon360.Models.CCT.Save_Bookings)">
            <summary>
            Adds a new booking record to storage.
            </summary>
            <param name="newBooking">The Save_Bookings object to be added</param>
            <returns>The newly added custom event</returns>
        </member>
        <member name="M:Gordon360.Services.SaveService.DeleteBookingAsync(System.String,System.String)">
            <summary>
            Delete the booking whose ids are specified by the parameter.
            </summary>
            <param name="rideID">The myschedule id</param>
            <param name="gordon_id">The gordon id</param>
            <returns>The myschedule that was just deleted</returns>
        </member>
        <member name="T:Gordon360.Services.ScheduleControlService">
            <summary>
            Service Class that facilitates data transactions between the ScheduleControlController and the ScheduleControl part of the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ScheduleControlService.UpdateSchedulePrivacyAsync(System.String,System.String)">
            <summary>
            privacy setting of schedule.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">Y or N</param>
        </member>
        <member name="M:Gordon360.Services.ScheduleControlService.UpdateDescriptionAsync(System.String,System.String)">
            <summary>
            description of schedule.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">New description</param>
        </member>
        <member name="M:Gordon360.Services.ScheduleControlService.UpdateModifiedTimeStampAsync(System.String,System.DateTime)">
            <summary>
            Update timestamp of modification in schedule.
            </summary>
            <param name="username">AD Username</param>
            <param name="value">Modified Time</param>
        </member>
        <member name="T:Gordon360.Services.ScheduleService">
            <summary>
            Service Class that facilitates data transactions between the SchedulesController and the Schedule part of the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.ScheduleService.GetScheduleStudentAsync(System.String)">
            <summary>
            Fetch the schedule item whose id and session code is specified by the parameter
            </summary>
            <param name="username">The AD Username of the student</param>
            <returns>StudentScheduleViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.ScheduleService.GetScheduleFacultyAsync(System.String)">
            <summary>
            Fetch the schedule item whose id and session code is specified by the parameter
            </summary>
            <param name="username">The AD Username of the instructor</param>
            <returns>StudentScheduleViewModel if found, null if not found</returns>
        </member>
        <member name="T:Gordon360.Services.SessionService">
            <summary>
            Service class to facilitate data transactions between the Controller and the database model.
            </summary>
        </member>
        <member name="M:Gordon360.Services.SessionService.Get(System.String)">
            <summary>
            Get the session record whose sesssion code matches the parameter.
            </summary>
            <param name="sessionCode">The session code.</param>
            <returns>A SessionViewModel if found, null if not found.</returns>
        </member>
        <member name="M:Gordon360.Services.SessionService.GetAll">
            <summary>
            Fetches all the session records from the database.
            </summary>
            <returns>A SessionViewModel IEnumerable. If nothing is found, an empty IEnumerable is returned.</returns>
        </member>
        <member name="M:Gordon360.Services.StudentEmploymentService.GetEmploymentAsync(System.String)">
            <summary>
            get Student Employment records of given user
            </summary>
            <param name="username">AD Username of user to get employment</param>
            <returns>VictoryPromiseViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.VictoryPromiseService.GetVPScoresAsync(System.String)">
            <summary>
            get victory promise scores
            </summary>
            <param name="username">id</param>
            <returns>VictoryPromiseViewModel if found, null if not found</returns>
        </member>
        <member name="M:Gordon360.Services.WellnessService.GetStatus(System.String)">
            <summary>
            Get the status of the user by id
            </summary>
            <param name="username">AD Username of the user to get the status of</param>
            <returns> The status of the user, a WellnessViewModel </returns>
        </member>
        <member name="M:Gordon360.Services.WellnessService.PostStatus(Gordon360.Controllers.WellnessController.WellnessStatusColor,System.String)">
            <summary>
            Stores wellness Status in database.
            </summary>
            <param name="username">AD Username of the user to post the status for</param>
            <param name="status"> Status that is being posted, one of the WellnessStatusColors </param>
            <returns>Status that was successfully recorded</returns>
        </member>
        <member name="M:Gordon360.Services.WellnessService.GetQuestion">
            <summary>
            gets the question for the wellness check from the back end
            </summary>
            <returns>A WellnessQuestionViewModel including the text of the question and the disclaimers for positive and negative answers.</returns>
        </member>
        <member name="M:Gordon360.Services.WellnessService.ExpirationDate(System.DateTime)">
            <summary>
            Creates an expiration date for a check in at the current time
            </summary>
            <param name="currentTime">The time of the check in</param>
            <returns>When the check in should expire (the next 5AM).</returns>
        </member>
        <member name="T:Gordon360.Static.Data.Data">
            <summary>
            Service class for data that is shared between all services.
            </summary>
        </member>
        <member name="T:Gordon360.Static.Methods.Helpers">
            <summary>
            Service class for methods that are shared between all services.
            </summary>
        </member>
        <member name="M:Gordon360.Static.Methods.Helpers.GetCurrentSessionAsync">
            <summary>
            Service method that gets the current session we are in.
            </summary>
            <returns>SessionViewModel of the current session. If no session is found for our current date, returns null.</returns>
        </member>
        <member name="M:Gordon360.Utilities.AuthUtils.GetAuthenticatedUserUsername(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the username of the authenticated user
            </summary>
            <param name="User">The ClaimsPrincipal representing the user's authentication claims</param>
            <returns>Username of the authenticated user, or null if none is found</returns>
        </member>
    </members>
</doc>
