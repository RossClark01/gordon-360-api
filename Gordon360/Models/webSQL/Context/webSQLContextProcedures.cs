// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Gordon360.Models.webSQL.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Gordon360.Models.webSQL.Context
{
    public partial class webSQLContext
    {
        private IwebSQLContextProcedures _procedures;

        public virtual IwebSQLContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new webSQLContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IwebSQLContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<account_list_buildingsResult>().HasNoKey().ToView(null);
        }
    }

    public partial class webSQLContextProcedures : IwebSQLContextProcedures
    {
        private readonly webSQLContext _context;

        public webSQLContextProcedures(webSQLContext context)
        {
            _context = context;
        }

        public virtual async Task<List<account_list_buildingsResult>> account_list_buildingsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<account_list_buildingsResult>("EXEC @returnValue = [dbo].[account_list_buildings]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
