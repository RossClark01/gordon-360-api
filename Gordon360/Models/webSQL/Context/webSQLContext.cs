// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Gordon360.Models.webSQL.Models;

namespace Gordon360.Models.webSQL.Context
{
    public partial class webSQLContext : DbContext
    {
        public webSQLContext()
        {
        }

        public webSQLContext(DbContextOptions<webSQLContext> options)
            : base(options)
        {
        }

        public virtual DbSet<GlobalSetting> GlobalSettings { get; set; }
        public virtual DbSet<Mailstop> Mailstops { get; set; }
        public virtual DbSet<Photo> Photos { get; set; }
        public virtual DbSet<account> accounts { get; set; }
        public virtual DbSet<account_profile> account_profiles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Photo>(entity =>
            {
                entity.Property(e => e.ID).HasComment("Unique sequntial ID");

                entity.Property(e => e.Accountid).HasComment("From account table");
            });

            modelBuilder.Entity<account>(entity =>
            {
                entity.HasKey(e => e.account_id)
                    .HasName("PK_account_1");

                entity.HasIndex(e => e.AD_Username, "IX_account")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.account_type, "IX_account_account_type")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.gordon_id, e.account_type, e.disabled }, "IX_account_account_type_disabled_gordon_id")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AD_Username, "IX_account_ad_username")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.barcode, "IX_account_barcode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.disabled, "IX_account_disabled")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.gordon_id, "IX_gordon_id")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.account_id, "PK_account")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.AD_Username, "ix_AD_Username_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.AD_Username, "ix_AD_Username_Includes2")
                    .HasFillFactor(100);

                entity.Property(e => e.AD_Username).HasComment("Active Directory Username");

                entity.Property(e => e.AD_dt_added).HasComment("Date account was added to Active Directory");

                entity.Property(e => e.AD_dt_changed).HasComment("Date account was changed in Active Directory");

                entity.Property(e => e.AD_dt_disabled).HasComment("Date account was disabled in Active Directory");

                entity.Property(e => e.Challenge_Answer).HasComment("Password Reset Challenge Answer");

                entity.Property(e => e.Challenge_question).HasComment("Password Reset Challenge Question");

                entity.Property(e => e.Cur_Division)
                    .IsFixedLength()
                    .HasComment("Current Student Division");

                entity.Property(e => e.DisMailBy).HasComment("Email Shut Off By");

                entity.Property(e => e.DisMailDate).HasComment("Email Shut Off Date");

                entity.Property(e => e.DisMailRsn).HasComment("Email Shut Off Reason");

                entity.Property(e => e.DisMailed)
                    .IsFixedLength()
                    .HasComment("Email Shut Off Flag Y/N");

                entity.Property(e => e.First_Time_Usr)
                    .IsFixedLength()
                    .HasComment("First Time User Flag");

                entity.Property(e => e.Forward_Keep_Copy).IsFixedLength();

                entity.Property(e => e.GCSA_voted).IsFixedLength();

                entity.Property(e => e.Grad_Date).HasComment("Used for first time login challenge");

                entity.Property(e => e.KeepEmail)
                    .IsFixedLength()
                    .HasComment("Employee Keep Email Flag Y/N");

                entity.Property(e => e.KeepEmailRsn).HasComment("Emp Keep Email Reason");

                entity.Property(e => e.MSOL_Alumni).IsFixedLength();

                entity.Property(e => e.MSOL_Faculty).IsFixedLength();

                entity.Property(e => e.MSOL_License).IsFixedLength();

                entity.Property(e => e.MSOL_Student).IsFixedLength();

                entity.Property(e => e.bus_lic).HasComment("'1' indicates licensed driver ");

                entity.Property(e => e.disabled).IsFixedLength();

                entity.Property(e => e.ferpa).IsFixedLength();

                entity.Property(e => e.policy).IsFixedLength();

                entity.Property(e => e.pwd_changed).IsFixedLength();

                entity.Property(e => e.special)
                    .IsFixedLength()
                    .HasComment("Special Access");

                entity.Property(e => e.van_lic).HasComment("'1' indicates licensed driver ");
            });

            modelBuilder.Entity<account_profile>(entity =>
            {
                entity.Property(e => e.account_id).ValueGeneratedNever();

                entity.Property(e => e.CHException).HasComment("Chapel Credit Exception Value");

                entity.Property(e => e.Show_Pic)
                    .IsFixedLength()
                    .HasComment("Display Who's Who Picture (Y/N)");

                entity.Property(e => e.athletic_events).IsFixedLength();

                entity.Property(e => e.campus_events).IsFixedLength();

                entity.Property(e => e.dining_menus).IsFixedLength();

                entity.Property(e => e.future_events).IsFixedLength();

                entity.Property(e => e.mylinks).IsFixedLength();

                entity.Property(e => e.supervisor_id).IsFixedLength();

                entity.Property(e => e.systems).IsFixedLength();

                entity.Property(e => e.today_events).IsFixedLength();

                entity.Property(e => e.weather).IsFixedLength();

                entity.Property(e => e.world_news).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}